generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id                     String     @id @default(cuid())
  email                  String     @unique
  password               String
  name                   String?
  role                   Role       @default(USER)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  cart                   Cart?
  orders                 Order[]
  referredById           String?
  referredBy             Referral?  @relation("ReferredUsers", fields: [referredById], references: [id])
  promoterReferral       Referral?  @relation("Promoter")
  blogPosts              BlogPost[] @relation("UserBlogPosts")
  passwordResetToken     String?    @unique
  passwordResetExpires   DateTime?
}

model PortfolioItem {
  id           String   @id @default(cuid())
  title        String
  description  String
  thumbnailUrl String?
  imageUrls    String // Store as JSON string
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BlogPost {
  id           String   @id @default(cuid())
  title        String   @unique
  summary      String
  content      String
  thumbnailUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation("UserBlogPosts", fields: [userId], references: [id], onDelete: Cascade)
}

model Service {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String
  price          Float
  features       String // Store as JSON string
  category       String
  thumbnailUrl   String?
  imageUrls      String // Store as JSON string
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  cartItems      CartItem[]
  orderLineItems OrderLineItem[]
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  createdAt DateTime @default(now())

  @@unique([cartId, serviceId])
}

model Order {
  id           String          @id @default(cuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  couponId     String?
  coupon       Coupon?         @relation(fields: [couponId], references: [id])
  status       OrderStatus     @default(PENDING)
  currency     String          @default("USD")
  totalAmount  Int // in cents
  requirements String
  suggestions  String?
  preferences  String?
  questions    String?
  metadata     String? // Store as JSON string
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  lineItems    OrderLineItem[]
  referralId   String?
  referral     Referral?       @relation(fields: [referralId], references: [id])
  commission   Commission?
}

model OrderLineItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id])
  serviceId  String
  service    Service @relation(fields: [serviceId], references: [id])
  unitPrice  Int // in cents
  quantity   Int     @default(1)
  totalPrice Int
}

model Coupon {
  id             String    @id @default(cuid())
  code           String    @unique
  type           String // "percentage" | "fixed"
  value          Int // store as integer: percent OR cents
  minOrderAmount Int? // cents
  maxUses        Int?
  currentUses    Int       @default(0)
  active         Boolean   @default(true)
  expiresAt      DateTime?
  orders         Order[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Referral {
  id             String       @id @default(cuid())
  userId         String       @unique
  user           User         @relation("Promoter", fields: [userId], references: [id], onDelete: Cascade) // Named relation
  code           String       @unique
  commissionRate Float        @default(0.10) // 10% commission rate
  referredUsers  User[]       @relation("ReferredUsers") // Named relation
  orders         Order[]
  commissions    Commission[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Commission {
  id         String       @id @default(cuid())
  orderId    String       @unique
  order      Order        @relation(fields: [orderId], references: [id])
  referralId String
  referral   Referral     @relation(fields: [referralId], references: [id])
  amount     Int // in cents
  status     PayoutStatus @default(UNPAID)
  payoutId   String?
  payout     Payout?      @relation(fields: [payoutId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Payout {
  id          String       @id @default(cuid())
  referralId  String
  amount      Int // in cents
  status      PayoutStatus @default(PENDING)
  payoutDate  DateTime     @default(now())
  commissions Commission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  IN_TECHNICAL_REVIEW
  APPROVED
  FAILED
  REFUNDED
  CANCELED
}

enum PayoutStatus {
  PENDING
  PAID
  FAILED
  UNPAID
}
