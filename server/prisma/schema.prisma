generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://myuser:mypassword@localhost:5432/mydatabase"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart?
  orders    Order[] 
}

model PortfolioItem {
  id           String   @id @default(cuid())
  title        String
  description  String
  thumbnailUrl String?
  imageUrls    String[] 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BlogPost {
  id           String   @id @default(cuid())
  title        String   @unique
  summary      String
  content      String
  thumbnailUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Service {
  id             String          @id @default(cuid())
  name           String          @unique
  description    String
  price          Float
  features       String[]
  category       String
  thumbnailUrl   String?
  imageUrls      String[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  cartItems      CartItem[]
  orderLineItems OrderLineItem[] 
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  createdAt DateTime @default(now())

  @@unique([cartId, serviceId])
}

model Order {
  id           String          @id @default(cuid())
  userId       String
  user         User            @relation(fields: [userId], references: [id])
  couponId     String?
  coupon       Coupon?         @relation(fields: [couponId], references: [id])
  status       OrderStatus     @default(PENDING)
  currency     String          @default("USD")
  totalAmount  Int // in cents
  requirements String
  suggestions  String?
  preferences  String?
  questions    String?
  metadata     Json?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  lineItems    OrderLineItem[]
}

model OrderLineItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id])
  serviceId  String
  service    Service @relation(fields: [serviceId], references: [id])
  unitPrice  Int // in cents
  quantity   Int     @default(1)
  totalPrice Int
}

model Coupon {
  id             String    @id @default(cuid())
  code           String    @unique
  type           String    @db.VarChar(10) // "percentage" | "fixed"
  value          Int       // store as integer: percent OR cents
  minOrderAmount Int?      // cents
  maxUses        Int?
  currentUses    Int       @default(0)
  active         Boolean   @default(true)
  expiresAt      DateTime?
  orders         Order[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([code])
  @@index([active])
  @@index([expiresAt])
}

enum OrderStatus {
  PENDING
  PAID
  IN_TECHNICAL_REVIEW
  APPROVED
  FAILED
  REFUNDED
  CANCELED
}
