// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://myuser:mypassword@localhost:5432/mydatabase"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart?
}
model PortfolioItem {
  id           String   @id @default(cuid())
  title        String
  description  String
  thumbnailUrl String?
  imageUrls    String[]      // carousel images
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model BlogPost {
  id           String   @id @default(cuid())
  title        String
  summary      String
  content      String
  thumbnailUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  price       Float
  features    String[]
  category    String
  thumbnailUrl String? 
  imageUrls   String[] 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
  cartItems   CartItem[]
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  service   Service  @relation(fields: [serviceId], references: [id])
  serviceId String
  createdAt DateTime @default(now())

  @@unique([cartId, serviceId]) 
}

model Order {
  id        String      @id @default(cuid())
  clientName  String
  clientEmail String
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  service     Service     @relation(fields: [serviceId], references: [id])
  serviceId   String
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}