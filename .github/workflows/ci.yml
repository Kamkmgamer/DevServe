name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: devserve
          POSTGRES_PASSWORD: devserve
          POSTGRES_DB: devserve
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U devserve" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type-check client
        working-directory: client
        run: npx tsc --noEmit

      - name: Type-check server
        working-directory: server
        run: npx tsc --noEmit

      - name: Lint (ESLint)
        run: pnpm lint

      - name: Prettier check
        run: npx prettier --check "**/*.{ts,tsx,js,json,md,css,scss,html,yml,yaml}"

      - name: Dependency audit
        run: pnpm audit --audit-level=high

      - name: Drizzle generate and push
        working-directory: server
        env:
          DATABASE_URL: postgresql://devserve:devserve@localhost:5432/devserve
        run: |
          npx drizzle-kit generate
          npx drizzle-kit push

      - name: Run server tests with coverage
        working-directory: server
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://devserve:devserve@localhost:5432/devserve
        run: pnpm --filter server run test:coverage

      - name: Upload server coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: server-coverage
          path: server/coverage

      - name: Run client tests with coverage
        working-directory: client
        env:
          NODE_ENV: test
        run: pnpm --filter client run test:coverage

      - name: Build client
        working-directory: client
        run: pnpm run build

  deploy:
    if: ${{ github.event_name == 'push' }}
    needs: build-and-test
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Vercel CLI
        run: pnpm add -g vercel

      - name: Install client deps
        working-directory: client
        run: pnpm install --frozen-lockfile

      - name: Pull Vercel env
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        working-directory: client
        run: vercel pull --yes --environment=production --token "$VERCEL_TOKEN"

      - name: Build (Vercel)
        if: ${{ env.VERCEL_TOKEN != '' }}
        working-directory: client
        run: vercel build --prod --token "$VERCEL_TOKEN"

      - name: Deploy (Vercel)
        if: ${{ env.VERCEL_TOKEN != '' }}
        working-directory: client
        run: vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN"

  backend-deploy:
    name: Backend Docker Build & Deploy
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') }}
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}/server
      DEPLOY_WEBHOOK_URL: ${{ secrets.DEPLOY_WEBHOOK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value={{date 'YYYYMMDD'}}-${{ github.run_number }}
            type=sha

      - name: Build and push (server)
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Trigger downstream deploy (optional)
        if: ${{ env.DEPLOY_WEBHOOK_URL != '' }}
        run: |
          curl -X POST -H 'Content-Type: application/json' \
            -d '{"ref":"${{ github.ref }}","sha":"${{ github.sha }}","image":"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"}' \
            "${{ env.DEPLOY_WEBHOOK_URL }}"
  dependency-review:
    name: Dependency Review (PRs)
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
