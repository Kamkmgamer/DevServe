name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dev deps (lint/prettier)
        run: npm ci

      - name: Install client deps
        working-directory: client
        run: npm ci

      - name: Install server deps
        working-directory: server
        run: npm ci

      - name: Type-check client
        working-directory: client
        run: npx tsc --noEmit

      - name: Type-check server
        working-directory: server
        run: npx tsc --noEmit

      - name: Lint (ESLint)
        run: npm run lint --if-present

      - name: Prettier check
        run: npx prettier --check "**/*.{ts,tsx,js,json,md,css,scss,html,yml,yaml}"

      - name: Dependency audit (server)
        working-directory: server
        continue-on-error: true
        run: |
          npm audit --omit=dev --audit-level=high || true

      - name: Dependency audit (client)
        working-directory: client
        continue-on-error: true
        run: |
          npm audit --omit=dev --audit-level=high || true

      - name: Prisma validate & migrate (temp SQLite)
        working-directory: server
        env:
          DATABASE_URL: file:./ci.db
        run: |
          npx prisma format
          npx prisma generate
          npx prisma migrate deploy --schema prisma/schema.prisma --skip-seed

      - name: Run server tests with coverage
        working-directory: server
        env:
          NODE_ENV: test
        run: npm test -- --coverage

      - name: Build client
        working-directory: client
        run: npm run build --if-present

  deploy:
    if: ${{ github.event_name == 'push' }}
    needs: build-and-test
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm i -g vercel

      - name: Install client deps
        working-directory: client
        run: npm ci

      - name: Pull Vercel env
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        working-directory: client
        run: vercel pull --yes --environment=production --token "$VERCEL_TOKEN"

      - name: Build (Vercel)
        if: ${{ env.VERCEL_TOKEN != '' }}
        working-directory: client
        run: vercel build --prod --token "$VERCEL_TOKEN"

      - name: Deploy (Vercel)
        if: ${{ env.VERCEL_TOKEN != '' }}
        working-directory: client
        run: vercel deploy --prebuilt --prod --token "$VERCEL_TOKEN"

  dependency-review:
    name: Dependency Review (PRs)
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
